#!/bin/bash

export IFS=$'\n'

# Constants

NUMFILES=1000
RAR=/usr/bin/unrar
ZIP=/usr/bin/unzip
HASHFUNC=/usr/bin/md5sum

ARCH_DIR=./Archives
TMP=./Temp
TMP2=./Temp2
IMPORT=./Books
OUT=./Output

REMOVED=removed.files
HASHTABLE=./md5_hash_table

BOOKSUFFIXES=('*.fb2' '*.epub')
ARCHSUFFIXES=('*.rar' '*.zip')

[[ -f $HASHTABLE ]] || echo d41d8cd98f00b204e9800998ecf8427e > $HASHTABLE

# Functions

create_dir() {
  [[ -d $1 ]] || mkdir $1 || { echo "$1 isn't a directory" >&2; exit 2; }
}

if_executable() {
  [[ -x $1 ]] || { echo "$1 - No such file" >&2; exit 3; }
}

get_archive_name() {
  local archive_name=$(ls $ARCH_DIR/*.{[zZ][iI][pP],[rR][aA][rR]} 2>/dev/null | head -1)
  [[ -w "$archive_name" ]] || { echo "Access denied to $archive_name" >&2; return 4; }
  echo "Processing $archive_name"
  echo $archive_name
}

unpack_archive() {
  local archiver=$1
  local suffixes=$2
  local dir=$3
  if_executable $archiver
  "$archiver" e -cl "$in_archive_name" @$suffixes $dir
}

process_files() {
  for i in $TMP/* ; do
    local sum=$($HASHFUNC $i | awk '{print $1}')
    if grep -q $sum $HASHTABLE; then
      echo rm $i >> $REMOVED
      rm $i
    else
      local suffix=${i##*.}
      mv $i $IMPORT/${sum}.${suffix}
      echo $sum >> $HASHTABLE
    fi
  done
}

create_zip() {
  create_dir $TMP2

  local names=$(ls $IMPORT | head -${NUMFILES})
  pushd .
  cd $IMPORT
  mv $names $TMP2
  popd

  local out_file_name=$(ls $TMP2 | head -1 | sed 's/\..*$//')
  zip -9 -dc -junk-paths $OUT/${out_file_name}.zip $TMP2/*
  rm -rf $TMP2
}

# Main script

create_dir $TMP
create_dir $IMPORT
create_dir $OUT

while in_archive_name=$(get_archive_name); do
  case "$in_archive_name" in
    *.[zZ][iI][pP]) unpack_archive $ZIP ${BOOKSUFFIXES[*]} $TMP
                    unpack_archive $ZIP ${ARCHSUFFIXES[*]} $ARCH_DIR
                    ;;
    *.[rR][aA][rR]) unpack_archive $RAR ${BOOKSUFFIXES[*]} $TMP
                    unpack_archive $RAR ${ARCHSUFFIXES[*]} $ARCH_DIR
                    ;;
                 *) echo "Wrong file suffix" >&2
                    exit 5
                    ;;
  esac

  rm -f "$in_archive_name"
  process_files

  while (( $(ls $IMPORT | wc -l) >= $NUMFILES )); do
    create_zip
  done
done

if [ "$(ls -A $IMPORT/* 2>/dev/null)" ]; then
  create_zip
fi

# Clean up temp files
rm -rf $TMP
rm -rf $TMP2

echo "All done"
